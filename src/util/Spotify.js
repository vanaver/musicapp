// Spotify.js

const clientId = 'bf9c5e949e0c4bdaa4fca97931606580'; // —Ç–≤–æ–π clientId
const redirectUri = 'https://e358-91-246-41-226.ngrok-free.app'; // —Ç–≤–æ–π redirect URI
const scope = "playlist-modify-public playlist-modify-private user-read-private"; // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function generateRandomString(length) {
  const charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let result = "";
  const values = new Uint32Array(length);
  window.crypto.getRandomValues(values);
  for (let i = 0; i < length; i++) {
    result += charset[values[i] % charset.length];
  }
  return result;
}

// –°–æ–∑–¥–∞–Ω–∏–µ SHA256 —Ö—ç—à–∞
async function sha256(plain) {
  const encoder = new TextEncoder();
  const data = encoder.encode(plain);
  return await window.crypto.subtle.digest("SHA-256", data);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ö—ç—à–∞ –≤ base64url
function base64urlencode(buffer) {
  const bytes = new Uint8Array(buffer);
  const string = String.fromCharCode(...bytes);
  return btoa(string)
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=+$/, '');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è code challenge –∏–∑ code verifier
async function generateCodeChallenge(codeVerifier) {
  const hash = await sha256(codeVerifier);
  return base64urlencode(hash);
}

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Spotify
export async function goToPage() {
  const codeVerifier = generateRandomString(128);
  const codeChallenge = await generateCodeChallenge(codeVerifier);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º code_verifier –≤ localStorage
  localStorage.setItem("code_verifier", codeVerifier);

  const params = new URLSearchParams({
    response_type: "code",
    client_id: clientId,
    scope,
    redirect_uri: redirectUri,
    code_challenge_method: "S256",
    code_challenge: codeChallenge,
  });

  window.location = `https://accounts.spotify.com/authorize?${params.toString()}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ access_token —Å –ø–æ–º–æ—â—å—é authorization code
export async function checkForCodeAndGetToken() {
  const params = new URLSearchParams(window.location.search);
  const code = params.get("code");

  if (!code) return;

  const codeVerifier = localStorage.getItem("code_verifier");
  if (!codeVerifier) {
    console.error("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ code_verifier");
    return;
  }

  const body = new URLSearchParams({
    client_id: clientId,
    grant_type: "authorization_code",
    code,
    redirect_uri: redirectUri,
    code_verifier: codeVerifier,
  });

  try {
    const response = await fetch("https://accounts.spotify.com/api/token", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: body.toString(),
    });

    const data = await response.json();
    console.log("–û—Ç–≤–µ—Ç –æ—Ç Spotify:", data);

    if (data.access_token) {
      const expiresIn = 3600; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      const expirationTime = Date.now() + expiresIn * 1000;
      console.log("‚úÖ Access token:", data.access_token);
      localStorage.setItem("access_token", data.access_token); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º access_token
      localStorage.setItem("access_token_expiration", expirationTime);
      console.log(expirationTime)
      const cleanUrl = window.location.origin + window.location.pathname;
      window.history.replaceState({}, document.title, cleanUrl);
      window.location.reload();
    } else {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token:", data);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
  } finally {
   
  }
}

export async function search(term) {
  const accessToken = localStorage.getItem("access_token");

  if (!accessToken) {
    console.error("‚ùå –ù–µ—Ç access token. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Spotify.");
    return [];
  }

  const endpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(term)}&type=track`;

  try {
    const response = await fetch(endpoint, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    const data = await response.json();

    if (!data.tracks || !data.tracks.items) {
      window.alert('–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–ø–æ—Ç–∏—Ñ–∞–π');
      return [];
    }

    return data.tracks.items.map(track => ({
      id: track.id,
      name: track.name,
      artist: track.artists[0].name,
      album: track.album.name,
      uri: track.uri,
      image: track.album.images[1]?.url || '',
      preview: track.preview_url,
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤:", error);
    window.alert('–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–ø–æ—Ç–∏—Ñ–∞–π')
    return [];
  }
}

export function isAccessTokenValid() {
  const token = localStorage.getItem("access_token");
  const expiration = localStorage.getItem("access_token_expiration");
  const now = Date.now();
  if (!token || !expiration) return false;
  if (now >= expiration) {
    console.log("–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.");
    return false
  } else {
    console.log("–¢–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.");
    return true
  }
}

export async function getCurrentUserId() {
  const accessToken = localStorage.getItem("access_token");
  const endpoint = "https://api.spotify.com/v1/me";

  try {
    const response = await fetch(endpoint, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    const data = await response.json();
    console.log(data.id + '–ø–æ–ª—É—á–µ–Ω–æ –∞–π–¥–∏ –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—è')
    return data.id;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}

export async function createPlaylist(userId, playlistName) {
  const accessToken = localStorage.getItem("access_token");
  const endpoint = `https://api.spotify.com/v1/users/${userId}/playlists`;

  try {
    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name: playlistName,
        public: false,
        description: "–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Jamming App",
      }),
    });

    const data = await response.json();
    return data.id;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", error);
    return null;
  }
}

export async function addTracksToPlaylist(playlistId, uris) {
  const accessToken = localStorage.getItem("access_token");
  const endpoint = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;
  const body = JSON.stringify({ uris });

  console.log("–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏:", uris); // üí° –ø–æ–∫–∞–∂–µ—Ç –º–∞—Å—Å–∏–≤ uri
  console.log("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", body);    // üí° –ø–æ–∫–∞–∂–µ—Ç JSON

  try {
    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
      body,
    });

    if (!response.ok) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏");
    }

    console.log("–¢—Ä–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤:", error);
    return false;
  }
}